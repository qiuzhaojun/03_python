"""
    面向对象
        字面意思：考虑问题从对象的角度出发
        类和对象：
            现实事物  -抽象-> 类 -具体-> 对象
        创建类
            class 类名:
                类变量 = 数据

                @classmethod
                def 方法2(cls):
                    ...

                def __init__(self,参数):
                    self.实例变量 = 参数

                def 方法1(self):
                    ...
        创建对象
            对象名 = 类名(数据)
            对象名.实例变量
            对象名.方法1()

            类名.类变量
            类名.方法2()
        三大特征
            封装：[分]
                封装数据：多个变量 合并为 一个类型
                    StudentModel合并了姓名,年龄,成绩..
                封装行为：隐藏实现细节
                    StudentView隐藏了显示菜单,选择菜单..
                设计思想：分而治之,变则疏之
                    M   V   C
            继承：[隔]
                语法：不劳而获
                    class 儿子(爸爸):
                        pass
                设计：隔离变化
                    老张-先用->交通工具<-后做-车,飞机,火车...
            多态：[做]
                语法：重写
                    class 儿子(爸爸):
                        def 爸爸的方法名(爸爸的参数):
                            ...
                设计：彰显子类的个性(不同/变化/具体功能)
        设计原则：
            开闭原则：增加新功能,不修改客户端代码.(目标)
            单一职责：一个类有且只有一个改变的原因(小而精)
            依赖倒置：使用抽象(父类),不使用具体(子类).(引出继承)
            组合复用：不优先使用继承复用(不灵活)
                     优先使用组合复用(通过变量调用)
                     组合关系连接变化
                     继承关系隔离变化
            迪米特法则：类与类低耦合(隔离)
            里氏替换：形参是父类,实参传子类(使用者)
                    尽量使用扩展重写(制作者)

"""


class MyClass:
    def __init__(self, data):
        self.data = data

    @property # 1.创建属性对象 2.绑定读取方法 3.给data赋值属性对象
    def data(self):
        return self.__data

    @data.setter# 1.调用setter方法 2.绑定写入方法 3.给data赋值属性对象
    def data(self,value):
        self.__data = value

m01 = MyClass(10)
print(m01.data)
